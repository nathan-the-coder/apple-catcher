const rl = @import("raylib");
const std = @import("std");

const KeyType = []const u8;
const ValueType = rl.Sound;

const allocator = std.heap.page_allocator;

pub const SoundManager = struct {
    storage: std.hash_map.HashMap(KeyType, ValueType),

    pub fn init() SoundManager {
        const map = std.array_hash_map.ArrayHashMap(KeyType, ValueType);
        map.init(allocator);

        return SoundManager{
            .storage = map,
        };
    }

    pub fn add(self: *SoundManager, name: []const u8, path: []const u8) void {
        self.storage.put(allocator, name, rl.LoadSound(path));
    }

    pub fn play(self: *SoundManager, name: []const u8) !void {
        rl.playSound(try self.storage.get(name));
    }

    pub fn stop(self: *SoundManager, name: []const u8) void {
        rl.stopSound(self.storage.get(name));
    }

    pub fn deinit(self: *SoundManager) void {
        self.storage.deinit();
    }
};
